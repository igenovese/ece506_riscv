Notes:
## PSEUDO-INSTRUCTIONS
MV      = ADDI;
SEQZ    = SLTIU 
NOT     = XORI
SNEZ    = SLTU
NOP     = ADDI
J       = JAL

TYPE R --> register-register (10)
funct7[31:25]               |  rs2[24:20]   |  rs1[19:15]   | funct3[14:12] |  rd[11:7]     | opcode[6:0]
# ADD   : rd = rs1 + rs2;
# SUB   : rd = rs1 - rs2;
# SLT   : rd = ( signed'(rs1) < signed'(rs2) ) ? { NB_WORD-1{1'b0}, 1'b1} : '0;
# SLTU  : rd = ( unsigned'(rs1) < unsigned'(rs2) ) ? { NB_WORD-1{1'b0}, 1'b1} : '0;
# AND   : rd = rs1 & rs2;
# OR    : rd = rs1 | rs2;
# XOR   : rd = rs1 ^ rs2;
# SLL   : rd = rs1 << rs2[4:0];
# SRL   : rd = rs1 >> rs2[4:0];
# SRA   : rd = rs1 >>> rs2[4:0];


TYPE I --> immediate, shift, load (15)
imm11_0[31:20]                              |  rs1[19:5]    | funct3[14:12] |  rd[11:7]     | opcode[6:0]
# ADDI  : rd = rs1 + 32'(signed'(imm));
# SLTI  : rd = ( signed'(rs1) < 32'(signed'(imm)) ) ? { NB_WORD-1{1'b0}, 1'b1} : '0;
# SLTIU : rd = ( unsigned'(rs1) < unsinged'(32'(signed'(imm)) )) ? { NB_WORD-1{1'b0}, 1'b1} : '0;
# ANDI  : rd = rs1 && 32'(signed'(imm));
# ORI   : rd = rs1 || 32'(signed'(imm));
# XORI  : rd = rs1 ^^ 32'(signed'(imm));
# SLLI  : rd = rs1 << imm[4:0];
# SRLI  : rd = rs1 >> imm[4:0];
# SRAI  : rd = rs1 >>> imm[4:0];
- LW    : rd = dmem[rs1+32'(signed(imm))];
- LH    : rd = signed'(dmem[rs1+32'(signed(imm))][15:0]);
- LHU   : rd = { 16'd0, dmem[rs1+32'(signed(imm))][15:0] };
- LB    : rd = signed'(dmem[rs1+32'(signed(imm))][7:0]);
- LBU   : rd = { 24'd0, dmem[rs1+32'(signed(imm))][7:0] };
$ JALR  : pc = (rs1 + imm) ^ -2; rd = pc + 4; //[TOCHECK]beware, if instruction mem is word addressed, rd = pc + 1

TYPE S --> store (3)
imm11_5[31:25]              |  rs2[24:20]   |  rs1[19:15]   | funct3[14:12] | imm4_0[11:7]  | opcode[6:0]
- SW    : dmem[rs1+32'(signed(imm))] = rs2;
- SH    : dmem[rs1+32'(signed(imm))] = rs2[15:0];
- SB    : dmem[rs1+32'(signed(imm))] = rs2[7:0];



TYPE U -> upper immediate (2)
imm31_12[31:12]                                                             |  rd[11:7]     | opcode[6:0]
- LUI   : rd = {imm,12{1'b0}};
- AUIPC : rd = {imm,12{1'b0}} + pc;

TYPE J --> jump (1)
imm20[31]|imm10_1[30:21]    |  imm11[20]    |    imm19_12[19:12]            |  rd[11:7]     | opcode[6:0]
$ JAL   : pc = pc + {offset[20:1],1'b0}; rd = pc + 4; //[TOCHECK] beware, if instruction mem is word addressed, rd = pc + 1

TYPE B --> branch (6)
imm12[31]|imm10_5[30:25]    |  rs2[24:20]   |  rs1[19:15]   | funct3[14:12] | imm4_0[11:7]  | opcode[6:0]
# BEQ   : pc = ( rs1 == rs2 ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?
# BNE   : pc = ( rs1 != rs2 ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?
# BLT   : pc = ( signed'(rs1) < signed'(rs2) ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?
# BLTU  : pc = ( unsigned'(rs1) < unsigned'(rs2) ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?
# BGE   : pc = ( signed'(rs1) >= signed'(rs2) ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?
# BGEU  : pc = ( unsigned'(rs1) >= unsigned'(rs2) ) ? pc + 32'(signed'(imm)); [TOCHECK] imm[0]?

